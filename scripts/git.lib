require_clean_work_tree () {
	# http://stackoverflow.com/questions/3878624/how-do-i-programmatically-determine-if-there-are-uncommited-changes
    # Update the index
    git update-index -q --ignore-submodules --refresh
    err=0

    # Disallow unstaged changes in the working tree
    if ! git diff-files --quiet --ignore-submodules --
    then
        echo >&2 "cannot $1: you have unstaged changes."
        git diff-files --name-status -r --ignore-submodules -- >&2
        err=1
    fi

    # Disallow uncommitted changes in the index
    if ! git diff-index --cached --quiet HEAD --ignore-submodules --
    then
        echo >&2 "cannot $1: your index contains uncommitted changes."
        git diff-index --cached --name-status -r --ignore-submodules HEAD -- >&2
        err=1
    fi

    if [ $err = 1 ]
    then
        echo >&2 "Please commit or stash them."
        exit 1
    fi
}

determine_remote_branch () {
	$(git remote prune origin)
	remoteBranches="$(git branch -r | grep -v 'HEAD' | sed -e "sxorigin/xxg" | grep -v "/" | awk '{print $1}')"
	currentBranches="$(git branch --contains ${CURRENT} | grep -v '\*' | awk '{print $1}')"
	remote="$(echo ${remoteBranches} ${currentBranches} | tr ' ' '\n' | sort | uniq -c | grep "2 " | awk '{print $2}' | head -1)"
	if [ -z "$remote" ] 
	then
		mergeBases=""
		for branch in ${remoteBranches}
		do
			mergeBase="$(git merge-base ${CURRENT} ${branch})"
			if [ ! -z "$mergeBase" ]
			then
				if [ -z "$mergeBases" ]
				then
					mergeBases=$mergeBase
				else
					mergeBases="${mergeBases} ${mergeBase}"
				fi
			fi
		done
		
		if [ ! -z "$mergeBases" ]
		then
			mostRecentMergeBase="$(git show -s --format='%ci %H' ${mergeBases} | sort -r | head -1 | awk '{print $4}')"
			for branch in ${remoteBranches}
			do
				if [ "$(git merge-base ${CURRENT} ${branch})" == "${mostRecentMergeBase}" ]
				then
					remote=$branch
					return
				fi
			done
		fi
	fi
}

assert_working_on_feature_branch () {
	if [ "${CURRENT}" == "${remote}" -o -z "$remote" ] 
	then
		echo "This command should be run from a feature branch, not from ${CURRENT}."
		exit 1;
	fi
}

echo "loaded library git.lib"